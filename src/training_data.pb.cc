// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: training_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "training_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace emre {

namespace {

const ::google::protobuf::Descriptor* PriorComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriorComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureFamilyPrior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureFamilyPrior_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_ModelClassType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_PriorUpdateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_RanefUpdateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_training_5fdata_2eproto() {
  protobuf_AddDesc_training_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "training_data.proto");
  GOOGLE_CHECK(file != NULL);
  PriorComponent_descriptor_ = file->message_type(0);
  static const int PriorComponent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, gamma_alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, gamma_beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, inverse_variance_),
  };
  PriorComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriorComponent_descriptor_,
      PriorComponent::default_instance_,
      PriorComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriorComponent));
  FeatureFamilyPrior_descriptor_ = file->message_type(1);
  static const int FeatureFamilyPrior_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, feature_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, inverse_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, spike_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, mixture_components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, update_component_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, model_class_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, prior_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, ranef_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, default_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, max_levels_for_update_),
  };
  FeatureFamilyPrior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureFamilyPrior_descriptor_,
      FeatureFamilyPrior::default_instance_,
      FeatureFamilyPrior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyPrior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureFamilyPrior));
  FeatureFamilyPrior_ModelClassType_descriptor_ = FeatureFamilyPrior_descriptor_->enum_type(0);
  FeatureFamilyPrior_PriorUpdateType_descriptor_ = FeatureFamilyPrior_descriptor_->enum_type(1);
  FeatureFamilyPrior_RanefUpdateType_descriptor_ = FeatureFamilyPrior_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_training_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriorComponent_descriptor_, &PriorComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureFamilyPrior_descriptor_, &FeatureFamilyPrior::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_training_5fdata_2eproto() {
  delete PriorComponent::default_instance_;
  delete PriorComponent_reflection_;
  delete FeatureFamilyPrior::default_instance_;
  delete FeatureFamilyPrior_reflection_;
}

void protobuf_AddDesc_training_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023training_data.proto\022\004emre\"\235\001\n\016PriorCom"
    "ponent\022\026\n\013probability\030\001 \001(\001:\0011\022\023\n\013gamma_"
    "alpha\030\002 \001(\001\022\022\n\ngamma_beta\030\003 \001(\001\022\023\n\010locat"
    "ion\030\004 \001(\001:\0011\022\r\n\005scale\030\005 \001(\001\022\014\n\004mean\030\006 \001("
    "\001\022\030\n\020inverse_variance\030\007 \001(\001\"\267\006\n\022FeatureF"
    "amilyPrior\022\026\n\016feature_family\030\001 \001(\t\022\014\n\004me"
    "an\030\002 \001(\001\022\030\n\020inverse_variance\030\003 \001(\001\022\031\n\021sp"
    "ike_probability\030\004 \001(\001\0220\n\022mixture_compone"
    "nts\030\005 \003(\0132\024.emre.PriorComponent\022)\n\033updat"
    "e_component_parameters\030\006 \001(\010:\004true\022J\n\020mo"
    "del_class_type\030\007 \001(\0162\'.emre.FeatureFamil"
    "yPrior.ModelClassType:\007POISSON\022O\n\021prior_"
    "update_type\030\010 \001(\0162(.emre.FeatureFamilyPr"
    "ior.PriorUpdateType:\nINTEGRATED\022R\n\021ranef"
    "_update_type\030\t \001(\0162(.emre.FeatureFamilyP"
    "rior.RanefUpdateType:\rGIBBS_SAMPLED\022\025\n\rd"
    "efault_score\030\n \001(\001\022\035\n\025max_levels_for_upd"
    "ate\030\013 \001(\005\"V\n\016ModelClassType\022\013\n\007POISSON\020\000"
    "\022\014\n\010GAUSSIAN\020\001\022\022\n\016SCALED_POISSON\020\002\022\025\n\021LO"
    "GNORMAL_POISSON\020\003\"\264\001\n\017PriorUpdateType\022\n\n"
    "\006SAMPLE\020\000\022\025\n\021RAO_BLACKWELLIZED\020\001\022\016\n\nINTE"
    "GRATED\020\002\022\024\n\020GIBBS_INTEGRATED\020\003\022\013\n\007MIXTUR"
    "E\020\004\022\t\n\005SPIKE\020\005\022\025\n\021SAMPLE_FOR_SCALED\020\006\022\027\n"
    "\023INVALID_UPDATE_TYPE\020d\022\020\n\013DONT_UPDATE\020\347\007"
    "\"3\n\017RanefUpdateType\022\021\n\rGIBBS_SAMPLED\020\000\022\r"
    "\n\tOPTIMIZED\020\001", 1013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "training_data.proto", &protobuf_RegisterTypes);
  PriorComponent::default_instance_ = new PriorComponent();
  FeatureFamilyPrior::default_instance_ = new FeatureFamilyPrior();
  PriorComponent::default_instance_->InitAsDefaultInstance();
  FeatureFamilyPrior::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_training_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_training_5fdata_2eproto {
  StaticDescriptorInitializer_training_5fdata_2eproto() {
    protobuf_AddDesc_training_5fdata_2eproto();
  }
} static_descriptor_initializer_training_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PriorComponent::kProbabilityFieldNumber;
const int PriorComponent::kGammaAlphaFieldNumber;
const int PriorComponent::kGammaBetaFieldNumber;
const int PriorComponent::kLocationFieldNumber;
const int PriorComponent::kScaleFieldNumber;
const int PriorComponent::kMeanFieldNumber;
const int PriorComponent::kInverseVarianceFieldNumber;
#endif  // !_MSC_VER

PriorComponent::PriorComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:emre.PriorComponent)
}

void PriorComponent::InitAsDefaultInstance() {
}

PriorComponent::PriorComponent(const PriorComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:emre.PriorComponent)
}

void PriorComponent::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 1;
  gamma_alpha_ = 0;
  gamma_beta_ = 0;
  location_ = 1;
  scale_ = 0;
  mean_ = 0;
  inverse_variance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriorComponent::~PriorComponent() {
  // @@protoc_insertion_point(destructor:emre.PriorComponent)
  SharedDtor();
}

void PriorComponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriorComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriorComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorComponent_descriptor_;
}

const PriorComponent& PriorComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_training_5fdata_2eproto();
  return *default_instance_;
}

PriorComponent* PriorComponent::default_instance_ = NULL;

PriorComponent* PriorComponent::New() const {
  return new PriorComponent;
}

void PriorComponent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PriorComponent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gamma_alpha_, gamma_beta_);
    ZR_(scale_, inverse_variance_);
    probability_ = 1;
    location_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriorComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:emre.PriorComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1 [default = 1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gamma_alpha;
        break;
      }

      // optional double gamma_alpha = 2;
      case 2: {
        if (tag == 17) {
         parse_gamma_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_alpha_)));
          set_has_gamma_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_gamma_beta;
        break;
      }

      // optional double gamma_beta = 3;
      case 3: {
        if (tag == 25) {
         parse_gamma_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_beta_)));
          set_has_gamma_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_location;
        break;
      }

      // optional double location = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_scale;
        break;
      }

      // optional double scale = 5;
      case 5: {
        if (tag == 41) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_mean;
        break;
      }

      // optional double mean = 6;
      case 6: {
        if (tag == 49) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_inverse_variance;
        break;
      }

      // optional double inverse_variance = 7;
      case 7: {
        if (tag == 57) {
         parse_inverse_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inverse_variance_)));
          set_has_inverse_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:emre.PriorComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:emre.PriorComponent)
  return false;
#undef DO_
}

void PriorComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:emre.PriorComponent)
  // optional double probability = 1 [default = 1];
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional double gamma_alpha = 2;
  if (has_gamma_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gamma_alpha(), output);
  }

  // optional double gamma_beta = 3;
  if (has_gamma_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gamma_beta(), output);
  }

  // optional double location = 4 [default = 1];
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->location(), output);
  }

  // optional double scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->scale(), output);
  }

  // optional double mean = 6;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mean(), output);
  }

  // optional double inverse_variance = 7;
  if (has_inverse_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->inverse_variance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:emre.PriorComponent)
}

::google::protobuf::uint8* PriorComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:emre.PriorComponent)
  // optional double probability = 1 [default = 1];
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional double gamma_alpha = 2;
  if (has_gamma_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gamma_alpha(), target);
  }

  // optional double gamma_beta = 3;
  if (has_gamma_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gamma_beta(), target);
  }

  // optional double location = 4 [default = 1];
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->location(), target);
  }

  // optional double scale = 5;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->scale(), target);
  }

  // optional double mean = 6;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mean(), target);
  }

  // optional double inverse_variance = 7;
  if (has_inverse_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->inverse_variance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emre.PriorComponent)
  return target;
}

int PriorComponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double probability = 1 [default = 1];
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double gamma_alpha = 2;
    if (has_gamma_alpha()) {
      total_size += 1 + 8;
    }

    // optional double gamma_beta = 3;
    if (has_gamma_beta()) {
      total_size += 1 + 8;
    }

    // optional double location = 4 [default = 1];
    if (has_location()) {
      total_size += 1 + 8;
    }

    // optional double scale = 5;
    if (has_scale()) {
      total_size += 1 + 8;
    }

    // optional double mean = 6;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // optional double inverse_variance = 7;
    if (has_inverse_variance()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriorComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriorComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriorComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriorComponent::MergeFrom(const PriorComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_gamma_alpha()) {
      set_gamma_alpha(from.gamma_alpha());
    }
    if (from.has_gamma_beta()) {
      set_gamma_beta(from.gamma_beta());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_inverse_variance()) {
      set_inverse_variance(from.inverse_variance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriorComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorComponent::CopyFrom(const PriorComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorComponent::IsInitialized() const {

  return true;
}

void PriorComponent::Swap(PriorComponent* other) {
  if (other != this) {
    std::swap(probability_, other->probability_);
    std::swap(gamma_alpha_, other->gamma_alpha_);
    std::swap(gamma_beta_, other->gamma_beta_);
    std::swap(location_, other->location_);
    std::swap(scale_, other->scale_);
    std::swap(mean_, other->mean_);
    std::swap(inverse_variance_, other->inverse_variance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriorComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriorComponent_descriptor_;
  metadata.reflection = PriorComponent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_ModelClassType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFamilyPrior_ModelClassType_descriptor_;
}
bool FeatureFamilyPrior_ModelClassType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::POISSON;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::GAUSSIAN;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::SCALED_POISSON;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::LOGNORMAL_POISSON;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::ModelClassType_MIN;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::ModelClassType_MAX;
const int FeatureFamilyPrior::ModelClassType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_PriorUpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFamilyPrior_PriorUpdateType_descriptor_;
}
bool FeatureFamilyPrior_PriorUpdateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::SAMPLE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::RAO_BLACKWELLIZED;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::INTEGRATED;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::GIBBS_INTEGRATED;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::MIXTURE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::SPIKE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::SAMPLE_FOR_SCALED;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::INVALID_UPDATE_TYPE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::DONT_UPDATE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::PriorUpdateType_MIN;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::PriorUpdateType_MAX;
const int FeatureFamilyPrior::PriorUpdateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_RanefUpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFamilyPrior_RanefUpdateType_descriptor_;
}
bool FeatureFamilyPrior_RanefUpdateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior::GIBBS_SAMPLED;
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior::OPTIMIZED;
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior::RanefUpdateType_MIN;
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior::RanefUpdateType_MAX;
const int FeatureFamilyPrior::RanefUpdateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FeatureFamilyPrior::kFeatureFamilyFieldNumber;
const int FeatureFamilyPrior::kMeanFieldNumber;
const int FeatureFamilyPrior::kInverseVarianceFieldNumber;
const int FeatureFamilyPrior::kSpikeProbabilityFieldNumber;
const int FeatureFamilyPrior::kMixtureComponentsFieldNumber;
const int FeatureFamilyPrior::kUpdateComponentParametersFieldNumber;
const int FeatureFamilyPrior::kModelClassTypeFieldNumber;
const int FeatureFamilyPrior::kPriorUpdateTypeFieldNumber;
const int FeatureFamilyPrior::kRanefUpdateTypeFieldNumber;
const int FeatureFamilyPrior::kDefaultScoreFieldNumber;
const int FeatureFamilyPrior::kMaxLevelsForUpdateFieldNumber;
#endif  // !_MSC_VER

FeatureFamilyPrior::FeatureFamilyPrior()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:emre.FeatureFamilyPrior)
}

void FeatureFamilyPrior::InitAsDefaultInstance() {
}

FeatureFamilyPrior::FeatureFamilyPrior(const FeatureFamilyPrior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:emre.FeatureFamilyPrior)
}

void FeatureFamilyPrior::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feature_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_ = 0;
  inverse_variance_ = 0;
  spike_probability_ = 0;
  update_component_parameters_ = true;
  model_class_type_ = 0;
  prior_update_type_ = 2;
  ranef_update_type_ = 0;
  default_score_ = 0;
  max_levels_for_update_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureFamilyPrior::~FeatureFamilyPrior() {
  // @@protoc_insertion_point(destructor:emre.FeatureFamilyPrior)
  SharedDtor();
}

void FeatureFamilyPrior::SharedDtor() {
  if (feature_family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_family_;
  }
  if (this != default_instance_) {
  }
}

void FeatureFamilyPrior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureFamilyPrior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFamilyPrior_descriptor_;
}

const FeatureFamilyPrior& FeatureFamilyPrior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_training_5fdata_2eproto();
  return *default_instance_;
}

FeatureFamilyPrior* FeatureFamilyPrior::default_instance_ = NULL;

FeatureFamilyPrior* FeatureFamilyPrior::New() const {
  return new FeatureFamilyPrior;
}

void FeatureFamilyPrior::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeatureFamilyPrior*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(mean_, spike_probability_);
    if (has_feature_family()) {
      if (feature_family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_family_->clear();
      }
    }
    update_component_parameters_ = true;
    model_class_type_ = 0;
    prior_update_type_ = 2;
  }
  ZR_(ranef_update_type_, max_levels_for_update_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mixture_components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureFamilyPrior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:emre.FeatureFamilyPrior)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string feature_family = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_family().data(), this->feature_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "feature_family");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_mean;
        break;
      }

      // optional double mean = 2;
      case 2: {
        if (tag == 17) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_inverse_variance;
        break;
      }

      // optional double inverse_variance = 3;
      case 3: {
        if (tag == 25) {
         parse_inverse_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inverse_variance_)));
          set_has_inverse_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_spike_probability;
        break;
      }

      // optional double spike_probability = 4;
      case 4: {
        if (tag == 33) {
         parse_spike_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spike_probability_)));
          set_has_spike_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mixture_components;
        break;
      }

      // repeated .emre.PriorComponent mixture_components = 5;
      case 5: {
        if (tag == 42) {
         parse_mixture_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mixture_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mixture_components;
        if (input->ExpectTag(48)) goto parse_update_component_parameters;
        break;
      }

      // optional bool update_component_parameters = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_update_component_parameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_component_parameters_)));
          set_has_update_component_parameters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_model_class_type;
        break;
      }

      // optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
      case 7: {
        if (tag == 56) {
         parse_model_class_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::emre::FeatureFamilyPrior_ModelClassType_IsValid(value)) {
            set_model_class_type(static_cast< ::emre::FeatureFamilyPrior_ModelClassType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_prior_update_type;
        break;
      }

      // optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
      case 8: {
        if (tag == 64) {
         parse_prior_update_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::emre::FeatureFamilyPrior_PriorUpdateType_IsValid(value)) {
            set_prior_update_type(static_cast< ::emre::FeatureFamilyPrior_PriorUpdateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ranef_update_type;
        break;
      }

      // optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
      case 9: {
        if (tag == 72) {
         parse_ranef_update_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::emre::FeatureFamilyPrior_RanefUpdateType_IsValid(value)) {
            set_ranef_update_type(static_cast< ::emre::FeatureFamilyPrior_RanefUpdateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_default_score;
        break;
      }

      // optional double default_score = 10;
      case 10: {
        if (tag == 81) {
         parse_default_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_score_)));
          set_has_default_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_levels_for_update;
        break;
      }

      // optional int32 max_levels_for_update = 11;
      case 11: {
        if (tag == 88) {
         parse_max_levels_for_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_levels_for_update_)));
          set_has_max_levels_for_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:emre.FeatureFamilyPrior)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:emre.FeatureFamilyPrior)
  return false;
#undef DO_
}

void FeatureFamilyPrior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:emre.FeatureFamilyPrior)
  // optional string feature_family = 1;
  if (has_feature_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_family().data(), this->feature_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feature_family(), output);
  }

  // optional double mean = 2;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mean(), output);
  }

  // optional double inverse_variance = 3;
  if (has_inverse_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->inverse_variance(), output);
  }

  // optional double spike_probability = 4;
  if (has_spike_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->spike_probability(), output);
  }

  // repeated .emre.PriorComponent mixture_components = 5;
  for (int i = 0; i < this->mixture_components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mixture_components(i), output);
  }

  // optional bool update_component_parameters = 6 [default = true];
  if (has_update_component_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->update_component_parameters(), output);
  }

  // optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
  if (has_model_class_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->model_class_type(), output);
  }

  // optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
  if (has_prior_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->prior_update_type(), output);
  }

  // optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
  if (has_ranef_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ranef_update_type(), output);
  }

  // optional double default_score = 10;
  if (has_default_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->default_score(), output);
  }

  // optional int32 max_levels_for_update = 11;
  if (has_max_levels_for_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_levels_for_update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:emre.FeatureFamilyPrior)
}

::google::protobuf::uint8* FeatureFamilyPrior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:emre.FeatureFamilyPrior)
  // optional string feature_family = 1;
  if (has_feature_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_family().data(), this->feature_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feature_family(), target);
  }

  // optional double mean = 2;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mean(), target);
  }

  // optional double inverse_variance = 3;
  if (has_inverse_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->inverse_variance(), target);
  }

  // optional double spike_probability = 4;
  if (has_spike_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->spike_probability(), target);
  }

  // repeated .emre.PriorComponent mixture_components = 5;
  for (int i = 0; i < this->mixture_components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mixture_components(i), target);
  }

  // optional bool update_component_parameters = 6 [default = true];
  if (has_update_component_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->update_component_parameters(), target);
  }

  // optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
  if (has_model_class_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->model_class_type(), target);
  }

  // optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
  if (has_prior_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->prior_update_type(), target);
  }

  // optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
  if (has_ranef_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ranef_update_type(), target);
  }

  // optional double default_score = 10;
  if (has_default_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->default_score(), target);
  }

  // optional int32 max_levels_for_update = 11;
  if (has_max_levels_for_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_levels_for_update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emre.FeatureFamilyPrior)
  return target;
}

int FeatureFamilyPrior::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string feature_family = 1;
    if (has_feature_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_family());
    }

    // optional double mean = 2;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // optional double inverse_variance = 3;
    if (has_inverse_variance()) {
      total_size += 1 + 8;
    }

    // optional double spike_probability = 4;
    if (has_spike_probability()) {
      total_size += 1 + 8;
    }

    // optional bool update_component_parameters = 6 [default = true];
    if (has_update_component_parameters()) {
      total_size += 1 + 1;
    }

    // optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
    if (has_model_class_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_class_type());
    }

    // optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
    if (has_prior_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prior_update_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
    if (has_ranef_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ranef_update_type());
    }

    // optional double default_score = 10;
    if (has_default_score()) {
      total_size += 1 + 8;
    }

    // optional int32 max_levels_for_update = 11;
    if (has_max_levels_for_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_levels_for_update());
    }

  }
  // repeated .emre.PriorComponent mixture_components = 5;
  total_size += 1 * this->mixture_components_size();
  for (int i = 0; i < this->mixture_components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mixture_components(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureFamilyPrior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureFamilyPrior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureFamilyPrior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureFamilyPrior::MergeFrom(const FeatureFamilyPrior& from) {
  GOOGLE_CHECK_NE(&from, this);
  mixture_components_.MergeFrom(from.mixture_components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_family()) {
      set_feature_family(from.feature_family());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_inverse_variance()) {
      set_inverse_variance(from.inverse_variance());
    }
    if (from.has_spike_probability()) {
      set_spike_probability(from.spike_probability());
    }
    if (from.has_update_component_parameters()) {
      set_update_component_parameters(from.update_component_parameters());
    }
    if (from.has_model_class_type()) {
      set_model_class_type(from.model_class_type());
    }
    if (from.has_prior_update_type()) {
      set_prior_update_type(from.prior_update_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ranef_update_type()) {
      set_ranef_update_type(from.ranef_update_type());
    }
    if (from.has_default_score()) {
      set_default_score(from.default_score());
    }
    if (from.has_max_levels_for_update()) {
      set_max_levels_for_update(from.max_levels_for_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureFamilyPrior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureFamilyPrior::CopyFrom(const FeatureFamilyPrior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureFamilyPrior::IsInitialized() const {

  return true;
}

void FeatureFamilyPrior::Swap(FeatureFamilyPrior* other) {
  if (other != this) {
    std::swap(feature_family_, other->feature_family_);
    std::swap(mean_, other->mean_);
    std::swap(inverse_variance_, other->inverse_variance_);
    std::swap(spike_probability_, other->spike_probability_);
    mixture_components_.Swap(&other->mixture_components_);
    std::swap(update_component_parameters_, other->update_component_parameters_);
    std::swap(model_class_type_, other->model_class_type_);
    std::swap(prior_update_type_, other->prior_update_type_);
    std::swap(ranef_update_type_, other->ranef_update_type_);
    std::swap(default_score_, other->default_score_);
    std::swap(max_levels_for_update_, other->max_levels_for_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureFamilyPrior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureFamilyPrior_descriptor_;
  metadata.reflection = FeatureFamilyPrior_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace emre

// @@protoc_insertion_point(global_scope)
