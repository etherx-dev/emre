// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: training_data.proto

#ifndef PROTOBUF_training_5fdata_2eproto__INCLUDED
#define PROTOBUF_training_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace emre {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_training_5fdata_2eproto();
void protobuf_AssignDesc_training_5fdata_2eproto();
void protobuf_ShutdownFile_training_5fdata_2eproto();

class PriorComponent;
class FeatureFamilyPrior;

enum FeatureFamilyPrior_ModelClassType {
  FeatureFamilyPrior_ModelClassType_POISSON = 0,
  FeatureFamilyPrior_ModelClassType_GAUSSIAN = 1,
  FeatureFamilyPrior_ModelClassType_SCALED_POISSON = 2,
  FeatureFamilyPrior_ModelClassType_LOGNORMAL_POISSON = 3
};
bool FeatureFamilyPrior_ModelClassType_IsValid(int value);
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior_ModelClassType_ModelClassType_MIN = FeatureFamilyPrior_ModelClassType_POISSON;
const FeatureFamilyPrior_ModelClassType FeatureFamilyPrior_ModelClassType_ModelClassType_MAX = FeatureFamilyPrior_ModelClassType_LOGNORMAL_POISSON;
const int FeatureFamilyPrior_ModelClassType_ModelClassType_ARRAYSIZE = FeatureFamilyPrior_ModelClassType_ModelClassType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_ModelClassType_descriptor();
inline const ::std::string& FeatureFamilyPrior_ModelClassType_Name(FeatureFamilyPrior_ModelClassType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureFamilyPrior_ModelClassType_descriptor(), value);
}
inline bool FeatureFamilyPrior_ModelClassType_Parse(
    const ::std::string& name, FeatureFamilyPrior_ModelClassType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureFamilyPrior_ModelClassType>(
    FeatureFamilyPrior_ModelClassType_descriptor(), name, value);
}
enum FeatureFamilyPrior_PriorUpdateType {
  FeatureFamilyPrior_PriorUpdateType_SAMPLE = 0,
  FeatureFamilyPrior_PriorUpdateType_RAO_BLACKWELLIZED = 1,
  FeatureFamilyPrior_PriorUpdateType_INTEGRATED = 2,
  FeatureFamilyPrior_PriorUpdateType_GIBBS_INTEGRATED = 3,
  FeatureFamilyPrior_PriorUpdateType_MIXTURE = 4,
  FeatureFamilyPrior_PriorUpdateType_SPIKE = 5,
  FeatureFamilyPrior_PriorUpdateType_SAMPLE_FOR_SCALED = 6,
  FeatureFamilyPrior_PriorUpdateType_INVALID_UPDATE_TYPE = 100,
  FeatureFamilyPrior_PriorUpdateType_DONT_UPDATE = 999
};
bool FeatureFamilyPrior_PriorUpdateType_IsValid(int value);
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_MIN = FeatureFamilyPrior_PriorUpdateType_SAMPLE;
const FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_MAX = FeatureFamilyPrior_PriorUpdateType_DONT_UPDATE;
const int FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_ARRAYSIZE = FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_PriorUpdateType_descriptor();
inline const ::std::string& FeatureFamilyPrior_PriorUpdateType_Name(FeatureFamilyPrior_PriorUpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureFamilyPrior_PriorUpdateType_descriptor(), value);
}
inline bool FeatureFamilyPrior_PriorUpdateType_Parse(
    const ::std::string& name, FeatureFamilyPrior_PriorUpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureFamilyPrior_PriorUpdateType>(
    FeatureFamilyPrior_PriorUpdateType_descriptor(), name, value);
}
enum FeatureFamilyPrior_RanefUpdateType {
  FeatureFamilyPrior_RanefUpdateType_GIBBS_SAMPLED = 0,
  FeatureFamilyPrior_RanefUpdateType_OPTIMIZED = 1
};
bool FeatureFamilyPrior_RanefUpdateType_IsValid(int value);
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_MIN = FeatureFamilyPrior_RanefUpdateType_GIBBS_SAMPLED;
const FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_MAX = FeatureFamilyPrior_RanefUpdateType_OPTIMIZED;
const int FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_ARRAYSIZE = FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureFamilyPrior_RanefUpdateType_descriptor();
inline const ::std::string& FeatureFamilyPrior_RanefUpdateType_Name(FeatureFamilyPrior_RanefUpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureFamilyPrior_RanefUpdateType_descriptor(), value);
}
inline bool FeatureFamilyPrior_RanefUpdateType_Parse(
    const ::std::string& name, FeatureFamilyPrior_RanefUpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureFamilyPrior_RanefUpdateType>(
    FeatureFamilyPrior_RanefUpdateType_descriptor(), name, value);
}
// ===================================================================

class PriorComponent : public ::google::protobuf::Message {
 public:
  PriorComponent();
  virtual ~PriorComponent();

  PriorComponent(const PriorComponent& from);

  inline PriorComponent& operator=(const PriorComponent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriorComponent& default_instance();

  void Swap(PriorComponent* other);

  // implements Message ----------------------------------------------

  PriorComponent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriorComponent& from);
  void MergeFrom(const PriorComponent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double probability = 1 [default = 1];
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 1;
  inline double probability() const;
  inline void set_probability(double value);

  // optional double gamma_alpha = 2;
  inline bool has_gamma_alpha() const;
  inline void clear_gamma_alpha();
  static const int kGammaAlphaFieldNumber = 2;
  inline double gamma_alpha() const;
  inline void set_gamma_alpha(double value);

  // optional double gamma_beta = 3;
  inline bool has_gamma_beta() const;
  inline void clear_gamma_beta();
  static const int kGammaBetaFieldNumber = 3;
  inline double gamma_beta() const;
  inline void set_gamma_beta(double value);

  // optional double location = 4 [default = 1];
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 4;
  inline double location() const;
  inline void set_location(double value);

  // optional double scale = 5;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  inline double scale() const;
  inline void set_scale(double value);

  // optional double mean = 6;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 6;
  inline double mean() const;
  inline void set_mean(double value);

  // optional double inverse_variance = 7;
  inline bool has_inverse_variance() const;
  inline void clear_inverse_variance();
  static const int kInverseVarianceFieldNumber = 7;
  inline double inverse_variance() const;
  inline void set_inverse_variance(double value);

  // @@protoc_insertion_point(class_scope:emre.PriorComponent)
 private:
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_gamma_alpha();
  inline void clear_has_gamma_alpha();
  inline void set_has_gamma_beta();
  inline void clear_has_gamma_beta();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_inverse_variance();
  inline void clear_has_inverse_variance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double probability_;
  double gamma_alpha_;
  double gamma_beta_;
  double location_;
  double scale_;
  double mean_;
  double inverse_variance_;
  friend void  protobuf_AddDesc_training_5fdata_2eproto();
  friend void protobuf_AssignDesc_training_5fdata_2eproto();
  friend void protobuf_ShutdownFile_training_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PriorComponent* default_instance_;
};
// -------------------------------------------------------------------

class FeatureFamilyPrior : public ::google::protobuf::Message {
 public:
  FeatureFamilyPrior();
  virtual ~FeatureFamilyPrior();

  FeatureFamilyPrior(const FeatureFamilyPrior& from);

  inline FeatureFamilyPrior& operator=(const FeatureFamilyPrior& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureFamilyPrior& default_instance();

  void Swap(FeatureFamilyPrior* other);

  // implements Message ----------------------------------------------

  FeatureFamilyPrior* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureFamilyPrior& from);
  void MergeFrom(const FeatureFamilyPrior& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FeatureFamilyPrior_ModelClassType ModelClassType;
  static const ModelClassType POISSON = FeatureFamilyPrior_ModelClassType_POISSON;
  static const ModelClassType GAUSSIAN = FeatureFamilyPrior_ModelClassType_GAUSSIAN;
  static const ModelClassType SCALED_POISSON = FeatureFamilyPrior_ModelClassType_SCALED_POISSON;
  static const ModelClassType LOGNORMAL_POISSON = FeatureFamilyPrior_ModelClassType_LOGNORMAL_POISSON;
  static inline bool ModelClassType_IsValid(int value) {
    return FeatureFamilyPrior_ModelClassType_IsValid(value);
  }
  static const ModelClassType ModelClassType_MIN =
    FeatureFamilyPrior_ModelClassType_ModelClassType_MIN;
  static const ModelClassType ModelClassType_MAX =
    FeatureFamilyPrior_ModelClassType_ModelClassType_MAX;
  static const int ModelClassType_ARRAYSIZE =
    FeatureFamilyPrior_ModelClassType_ModelClassType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelClassType_descriptor() {
    return FeatureFamilyPrior_ModelClassType_descriptor();
  }
  static inline const ::std::string& ModelClassType_Name(ModelClassType value) {
    return FeatureFamilyPrior_ModelClassType_Name(value);
  }
  static inline bool ModelClassType_Parse(const ::std::string& name,
      ModelClassType* value) {
    return FeatureFamilyPrior_ModelClassType_Parse(name, value);
  }

  typedef FeatureFamilyPrior_PriorUpdateType PriorUpdateType;
  static const PriorUpdateType SAMPLE = FeatureFamilyPrior_PriorUpdateType_SAMPLE;
  static const PriorUpdateType RAO_BLACKWELLIZED = FeatureFamilyPrior_PriorUpdateType_RAO_BLACKWELLIZED;
  static const PriorUpdateType INTEGRATED = FeatureFamilyPrior_PriorUpdateType_INTEGRATED;
  static const PriorUpdateType GIBBS_INTEGRATED = FeatureFamilyPrior_PriorUpdateType_GIBBS_INTEGRATED;
  static const PriorUpdateType MIXTURE = FeatureFamilyPrior_PriorUpdateType_MIXTURE;
  static const PriorUpdateType SPIKE = FeatureFamilyPrior_PriorUpdateType_SPIKE;
  static const PriorUpdateType SAMPLE_FOR_SCALED = FeatureFamilyPrior_PriorUpdateType_SAMPLE_FOR_SCALED;
  static const PriorUpdateType INVALID_UPDATE_TYPE = FeatureFamilyPrior_PriorUpdateType_INVALID_UPDATE_TYPE;
  static const PriorUpdateType DONT_UPDATE = FeatureFamilyPrior_PriorUpdateType_DONT_UPDATE;
  static inline bool PriorUpdateType_IsValid(int value) {
    return FeatureFamilyPrior_PriorUpdateType_IsValid(value);
  }
  static const PriorUpdateType PriorUpdateType_MIN =
    FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_MIN;
  static const PriorUpdateType PriorUpdateType_MAX =
    FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_MAX;
  static const int PriorUpdateType_ARRAYSIZE =
    FeatureFamilyPrior_PriorUpdateType_PriorUpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PriorUpdateType_descriptor() {
    return FeatureFamilyPrior_PriorUpdateType_descriptor();
  }
  static inline const ::std::string& PriorUpdateType_Name(PriorUpdateType value) {
    return FeatureFamilyPrior_PriorUpdateType_Name(value);
  }
  static inline bool PriorUpdateType_Parse(const ::std::string& name,
      PriorUpdateType* value) {
    return FeatureFamilyPrior_PriorUpdateType_Parse(name, value);
  }

  typedef FeatureFamilyPrior_RanefUpdateType RanefUpdateType;
  static const RanefUpdateType GIBBS_SAMPLED = FeatureFamilyPrior_RanefUpdateType_GIBBS_SAMPLED;
  static const RanefUpdateType OPTIMIZED = FeatureFamilyPrior_RanefUpdateType_OPTIMIZED;
  static inline bool RanefUpdateType_IsValid(int value) {
    return FeatureFamilyPrior_RanefUpdateType_IsValid(value);
  }
  static const RanefUpdateType RanefUpdateType_MIN =
    FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_MIN;
  static const RanefUpdateType RanefUpdateType_MAX =
    FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_MAX;
  static const int RanefUpdateType_ARRAYSIZE =
    FeatureFamilyPrior_RanefUpdateType_RanefUpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RanefUpdateType_descriptor() {
    return FeatureFamilyPrior_RanefUpdateType_descriptor();
  }
  static inline const ::std::string& RanefUpdateType_Name(RanefUpdateType value) {
    return FeatureFamilyPrior_RanefUpdateType_Name(value);
  }
  static inline bool RanefUpdateType_Parse(const ::std::string& name,
      RanefUpdateType* value) {
    return FeatureFamilyPrior_RanefUpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string feature_family = 1;
  inline bool has_feature_family() const;
  inline void clear_feature_family();
  static const int kFeatureFamilyFieldNumber = 1;
  inline const ::std::string& feature_family() const;
  inline void set_feature_family(const ::std::string& value);
  inline void set_feature_family(const char* value);
  inline void set_feature_family(const char* value, size_t size);
  inline ::std::string* mutable_feature_family();
  inline ::std::string* release_feature_family();
  inline void set_allocated_feature_family(::std::string* feature_family);

  // optional double mean = 2;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 2;
  inline double mean() const;
  inline void set_mean(double value);

  // optional double inverse_variance = 3;
  inline bool has_inverse_variance() const;
  inline void clear_inverse_variance();
  static const int kInverseVarianceFieldNumber = 3;
  inline double inverse_variance() const;
  inline void set_inverse_variance(double value);

  // optional double spike_probability = 4;
  inline bool has_spike_probability() const;
  inline void clear_spike_probability();
  static const int kSpikeProbabilityFieldNumber = 4;
  inline double spike_probability() const;
  inline void set_spike_probability(double value);

  // repeated .emre.PriorComponent mixture_components = 5;
  inline int mixture_components_size() const;
  inline void clear_mixture_components();
  static const int kMixtureComponentsFieldNumber = 5;
  inline const ::emre::PriorComponent& mixture_components(int index) const;
  inline ::emre::PriorComponent* mutable_mixture_components(int index);
  inline ::emre::PriorComponent* add_mixture_components();
  inline const ::google::protobuf::RepeatedPtrField< ::emre::PriorComponent >&
      mixture_components() const;
  inline ::google::protobuf::RepeatedPtrField< ::emre::PriorComponent >*
      mutable_mixture_components();

  // optional bool update_component_parameters = 6 [default = true];
  inline bool has_update_component_parameters() const;
  inline void clear_update_component_parameters();
  static const int kUpdateComponentParametersFieldNumber = 6;
  inline bool update_component_parameters() const;
  inline void set_update_component_parameters(bool value);

  // optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
  inline bool has_model_class_type() const;
  inline void clear_model_class_type();
  static const int kModelClassTypeFieldNumber = 7;
  inline ::emre::FeatureFamilyPrior_ModelClassType model_class_type() const;
  inline void set_model_class_type(::emre::FeatureFamilyPrior_ModelClassType value);

  // optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
  inline bool has_prior_update_type() const;
  inline void clear_prior_update_type();
  static const int kPriorUpdateTypeFieldNumber = 8;
  inline ::emre::FeatureFamilyPrior_PriorUpdateType prior_update_type() const;
  inline void set_prior_update_type(::emre::FeatureFamilyPrior_PriorUpdateType value);

  // optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
  inline bool has_ranef_update_type() const;
  inline void clear_ranef_update_type();
  static const int kRanefUpdateTypeFieldNumber = 9;
  inline ::emre::FeatureFamilyPrior_RanefUpdateType ranef_update_type() const;
  inline void set_ranef_update_type(::emre::FeatureFamilyPrior_RanefUpdateType value);

  // optional double default_score = 10;
  inline bool has_default_score() const;
  inline void clear_default_score();
  static const int kDefaultScoreFieldNumber = 10;
  inline double default_score() const;
  inline void set_default_score(double value);

  // optional int32 max_levels_for_update = 11;
  inline bool has_max_levels_for_update() const;
  inline void clear_max_levels_for_update();
  static const int kMaxLevelsForUpdateFieldNumber = 11;
  inline ::google::protobuf::int32 max_levels_for_update() const;
  inline void set_max_levels_for_update(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:emre.FeatureFamilyPrior)
 private:
  inline void set_has_feature_family();
  inline void clear_has_feature_family();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_inverse_variance();
  inline void clear_has_inverse_variance();
  inline void set_has_spike_probability();
  inline void clear_has_spike_probability();
  inline void set_has_update_component_parameters();
  inline void clear_has_update_component_parameters();
  inline void set_has_model_class_type();
  inline void clear_has_model_class_type();
  inline void set_has_prior_update_type();
  inline void clear_has_prior_update_type();
  inline void set_has_ranef_update_type();
  inline void clear_has_ranef_update_type();
  inline void set_has_default_score();
  inline void clear_has_default_score();
  inline void set_has_max_levels_for_update();
  inline void clear_has_max_levels_for_update();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* feature_family_;
  double mean_;
  double inverse_variance_;
  double spike_probability_;
  ::google::protobuf::RepeatedPtrField< ::emre::PriorComponent > mixture_components_;
  bool update_component_parameters_;
  int model_class_type_;
  int prior_update_type_;
  int ranef_update_type_;
  double default_score_;
  ::google::protobuf::int32 max_levels_for_update_;
  friend void  protobuf_AddDesc_training_5fdata_2eproto();
  friend void protobuf_AssignDesc_training_5fdata_2eproto();
  friend void protobuf_ShutdownFile_training_5fdata_2eproto();

  void InitAsDefaultInstance();
  static FeatureFamilyPrior* default_instance_;
};
// ===================================================================


// ===================================================================

// PriorComponent

// optional double probability = 1 [default = 1];
inline bool PriorComponent::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriorComponent::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriorComponent::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriorComponent::clear_probability() {
  probability_ = 1;
  clear_has_probability();
}
inline double PriorComponent::probability() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.probability)
  return probability_;
}
inline void PriorComponent::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.probability)
}

// optional double gamma_alpha = 2;
inline bool PriorComponent::has_gamma_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriorComponent::set_has_gamma_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriorComponent::clear_has_gamma_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriorComponent::clear_gamma_alpha() {
  gamma_alpha_ = 0;
  clear_has_gamma_alpha();
}
inline double PriorComponent::gamma_alpha() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.gamma_alpha)
  return gamma_alpha_;
}
inline void PriorComponent::set_gamma_alpha(double value) {
  set_has_gamma_alpha();
  gamma_alpha_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.gamma_alpha)
}

// optional double gamma_beta = 3;
inline bool PriorComponent::has_gamma_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriorComponent::set_has_gamma_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriorComponent::clear_has_gamma_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriorComponent::clear_gamma_beta() {
  gamma_beta_ = 0;
  clear_has_gamma_beta();
}
inline double PriorComponent::gamma_beta() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.gamma_beta)
  return gamma_beta_;
}
inline void PriorComponent::set_gamma_beta(double value) {
  set_has_gamma_beta();
  gamma_beta_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.gamma_beta)
}

// optional double location = 4 [default = 1];
inline bool PriorComponent::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriorComponent::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriorComponent::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriorComponent::clear_location() {
  location_ = 1;
  clear_has_location();
}
inline double PriorComponent::location() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.location)
  return location_;
}
inline void PriorComponent::set_location(double value) {
  set_has_location();
  location_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.location)
}

// optional double scale = 5;
inline bool PriorComponent::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriorComponent::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriorComponent::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriorComponent::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline double PriorComponent::scale() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.scale)
  return scale_;
}
inline void PriorComponent::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.scale)
}

// optional double mean = 6;
inline bool PriorComponent::has_mean() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PriorComponent::set_has_mean() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PriorComponent::clear_has_mean() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PriorComponent::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double PriorComponent::mean() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.mean)
  return mean_;
}
inline void PriorComponent::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.mean)
}

// optional double inverse_variance = 7;
inline bool PriorComponent::has_inverse_variance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PriorComponent::set_has_inverse_variance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PriorComponent::clear_has_inverse_variance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PriorComponent::clear_inverse_variance() {
  inverse_variance_ = 0;
  clear_has_inverse_variance();
}
inline double PriorComponent::inverse_variance() const {
  // @@protoc_insertion_point(field_get:emre.PriorComponent.inverse_variance)
  return inverse_variance_;
}
inline void PriorComponent::set_inverse_variance(double value) {
  set_has_inverse_variance();
  inverse_variance_ = value;
  // @@protoc_insertion_point(field_set:emre.PriorComponent.inverse_variance)
}

// -------------------------------------------------------------------

// FeatureFamilyPrior

// optional string feature_family = 1;
inline bool FeatureFamilyPrior::has_feature_family() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureFamilyPrior::set_has_feature_family() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureFamilyPrior::clear_has_feature_family() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureFamilyPrior::clear_feature_family() {
  if (feature_family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_family_->clear();
  }
  clear_has_feature_family();
}
inline const ::std::string& FeatureFamilyPrior::feature_family() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.feature_family)
  return *feature_family_;
}
inline void FeatureFamilyPrior::set_feature_family(const ::std::string& value) {
  set_has_feature_family();
  if (feature_family_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_family_ = new ::std::string;
  }
  feature_family_->assign(value);
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.feature_family)
}
inline void FeatureFamilyPrior::set_feature_family(const char* value) {
  set_has_feature_family();
  if (feature_family_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_family_ = new ::std::string;
  }
  feature_family_->assign(value);
  // @@protoc_insertion_point(field_set_char:emre.FeatureFamilyPrior.feature_family)
}
inline void FeatureFamilyPrior::set_feature_family(const char* value, size_t size) {
  set_has_feature_family();
  if (feature_family_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_family_ = new ::std::string;
  }
  feature_family_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:emre.FeatureFamilyPrior.feature_family)
}
inline ::std::string* FeatureFamilyPrior::mutable_feature_family() {
  set_has_feature_family();
  if (feature_family_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_family_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:emre.FeatureFamilyPrior.feature_family)
  return feature_family_;
}
inline ::std::string* FeatureFamilyPrior::release_feature_family() {
  clear_has_feature_family();
  if (feature_family_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = feature_family_;
    feature_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeatureFamilyPrior::set_allocated_feature_family(::std::string* feature_family) {
  if (feature_family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_family_;
  }
  if (feature_family) {
    set_has_feature_family();
    feature_family_ = feature_family;
  } else {
    clear_has_feature_family();
    feature_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:emre.FeatureFamilyPrior.feature_family)
}

// optional double mean = 2;
inline bool FeatureFamilyPrior::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureFamilyPrior::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureFamilyPrior::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureFamilyPrior::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double FeatureFamilyPrior::mean() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.mean)
  return mean_;
}
inline void FeatureFamilyPrior::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.mean)
}

// optional double inverse_variance = 3;
inline bool FeatureFamilyPrior::has_inverse_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureFamilyPrior::set_has_inverse_variance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureFamilyPrior::clear_has_inverse_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureFamilyPrior::clear_inverse_variance() {
  inverse_variance_ = 0;
  clear_has_inverse_variance();
}
inline double FeatureFamilyPrior::inverse_variance() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.inverse_variance)
  return inverse_variance_;
}
inline void FeatureFamilyPrior::set_inverse_variance(double value) {
  set_has_inverse_variance();
  inverse_variance_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.inverse_variance)
}

// optional double spike_probability = 4;
inline bool FeatureFamilyPrior::has_spike_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeatureFamilyPrior::set_has_spike_probability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeatureFamilyPrior::clear_has_spike_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeatureFamilyPrior::clear_spike_probability() {
  spike_probability_ = 0;
  clear_has_spike_probability();
}
inline double FeatureFamilyPrior::spike_probability() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.spike_probability)
  return spike_probability_;
}
inline void FeatureFamilyPrior::set_spike_probability(double value) {
  set_has_spike_probability();
  spike_probability_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.spike_probability)
}

// repeated .emre.PriorComponent mixture_components = 5;
inline int FeatureFamilyPrior::mixture_components_size() const {
  return mixture_components_.size();
}
inline void FeatureFamilyPrior::clear_mixture_components() {
  mixture_components_.Clear();
}
inline const ::emre::PriorComponent& FeatureFamilyPrior::mixture_components(int index) const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.mixture_components)
  return mixture_components_.Get(index);
}
inline ::emre::PriorComponent* FeatureFamilyPrior::mutable_mixture_components(int index) {
  // @@protoc_insertion_point(field_mutable:emre.FeatureFamilyPrior.mixture_components)
  return mixture_components_.Mutable(index);
}
inline ::emre::PriorComponent* FeatureFamilyPrior::add_mixture_components() {
  // @@protoc_insertion_point(field_add:emre.FeatureFamilyPrior.mixture_components)
  return mixture_components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::emre::PriorComponent >&
FeatureFamilyPrior::mixture_components() const {
  // @@protoc_insertion_point(field_list:emre.FeatureFamilyPrior.mixture_components)
  return mixture_components_;
}
inline ::google::protobuf::RepeatedPtrField< ::emre::PriorComponent >*
FeatureFamilyPrior::mutable_mixture_components() {
  // @@protoc_insertion_point(field_mutable_list:emre.FeatureFamilyPrior.mixture_components)
  return &mixture_components_;
}

// optional bool update_component_parameters = 6 [default = true];
inline bool FeatureFamilyPrior::has_update_component_parameters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeatureFamilyPrior::set_has_update_component_parameters() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeatureFamilyPrior::clear_has_update_component_parameters() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeatureFamilyPrior::clear_update_component_parameters() {
  update_component_parameters_ = true;
  clear_has_update_component_parameters();
}
inline bool FeatureFamilyPrior::update_component_parameters() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.update_component_parameters)
  return update_component_parameters_;
}
inline void FeatureFamilyPrior::set_update_component_parameters(bool value) {
  set_has_update_component_parameters();
  update_component_parameters_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.update_component_parameters)
}

// optional .emre.FeatureFamilyPrior.ModelClassType model_class_type = 7 [default = POISSON];
inline bool FeatureFamilyPrior::has_model_class_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeatureFamilyPrior::set_has_model_class_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeatureFamilyPrior::clear_has_model_class_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeatureFamilyPrior::clear_model_class_type() {
  model_class_type_ = 0;
  clear_has_model_class_type();
}
inline ::emre::FeatureFamilyPrior_ModelClassType FeatureFamilyPrior::model_class_type() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.model_class_type)
  return static_cast< ::emre::FeatureFamilyPrior_ModelClassType >(model_class_type_);
}
inline void FeatureFamilyPrior::set_model_class_type(::emre::FeatureFamilyPrior_ModelClassType value) {
  assert(::emre::FeatureFamilyPrior_ModelClassType_IsValid(value));
  set_has_model_class_type();
  model_class_type_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.model_class_type)
}

// optional .emre.FeatureFamilyPrior.PriorUpdateType prior_update_type = 8 [default = INTEGRATED];
inline bool FeatureFamilyPrior::has_prior_update_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FeatureFamilyPrior::set_has_prior_update_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FeatureFamilyPrior::clear_has_prior_update_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FeatureFamilyPrior::clear_prior_update_type() {
  prior_update_type_ = 2;
  clear_has_prior_update_type();
}
inline ::emre::FeatureFamilyPrior_PriorUpdateType FeatureFamilyPrior::prior_update_type() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.prior_update_type)
  return static_cast< ::emre::FeatureFamilyPrior_PriorUpdateType >(prior_update_type_);
}
inline void FeatureFamilyPrior::set_prior_update_type(::emre::FeatureFamilyPrior_PriorUpdateType value) {
  assert(::emre::FeatureFamilyPrior_PriorUpdateType_IsValid(value));
  set_has_prior_update_type();
  prior_update_type_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.prior_update_type)
}

// optional .emre.FeatureFamilyPrior.RanefUpdateType ranef_update_type = 9 [default = GIBBS_SAMPLED];
inline bool FeatureFamilyPrior::has_ranef_update_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FeatureFamilyPrior::set_has_ranef_update_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FeatureFamilyPrior::clear_has_ranef_update_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FeatureFamilyPrior::clear_ranef_update_type() {
  ranef_update_type_ = 0;
  clear_has_ranef_update_type();
}
inline ::emre::FeatureFamilyPrior_RanefUpdateType FeatureFamilyPrior::ranef_update_type() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.ranef_update_type)
  return static_cast< ::emre::FeatureFamilyPrior_RanefUpdateType >(ranef_update_type_);
}
inline void FeatureFamilyPrior::set_ranef_update_type(::emre::FeatureFamilyPrior_RanefUpdateType value) {
  assert(::emre::FeatureFamilyPrior_RanefUpdateType_IsValid(value));
  set_has_ranef_update_type();
  ranef_update_type_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.ranef_update_type)
}

// optional double default_score = 10;
inline bool FeatureFamilyPrior::has_default_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FeatureFamilyPrior::set_has_default_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FeatureFamilyPrior::clear_has_default_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FeatureFamilyPrior::clear_default_score() {
  default_score_ = 0;
  clear_has_default_score();
}
inline double FeatureFamilyPrior::default_score() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.default_score)
  return default_score_;
}
inline void FeatureFamilyPrior::set_default_score(double value) {
  set_has_default_score();
  default_score_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.default_score)
}

// optional int32 max_levels_for_update = 11;
inline bool FeatureFamilyPrior::has_max_levels_for_update() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FeatureFamilyPrior::set_has_max_levels_for_update() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FeatureFamilyPrior::clear_has_max_levels_for_update() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FeatureFamilyPrior::clear_max_levels_for_update() {
  max_levels_for_update_ = 0;
  clear_has_max_levels_for_update();
}
inline ::google::protobuf::int32 FeatureFamilyPrior::max_levels_for_update() const {
  // @@protoc_insertion_point(field_get:emre.FeatureFamilyPrior.max_levels_for_update)
  return max_levels_for_update_;
}
inline void FeatureFamilyPrior::set_max_levels_for_update(::google::protobuf::int32 value) {
  set_has_max_levels_for_update();
  max_levels_for_update_ = value;
  // @@protoc_insertion_point(field_set:emre.FeatureFamilyPrior.max_levels_for_update)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace emre

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::emre::FeatureFamilyPrior_ModelClassType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::emre::FeatureFamilyPrior_ModelClassType>() {
  return ::emre::FeatureFamilyPrior_ModelClassType_descriptor();
}
template <> struct is_proto_enum< ::emre::FeatureFamilyPrior_PriorUpdateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::emre::FeatureFamilyPrior_PriorUpdateType>() {
  return ::emre::FeatureFamilyPrior_PriorUpdateType_descriptor();
}
template <> struct is_proto_enum< ::emre::FeatureFamilyPrior_RanefUpdateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::emre::FeatureFamilyPrior_RanefUpdateType>() {
  return ::emre::FeatureFamilyPrior_RanefUpdateType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_training_5fdata_2eproto__INCLUDED
